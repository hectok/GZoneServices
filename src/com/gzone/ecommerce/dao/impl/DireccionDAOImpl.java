package com.gzone.ecommerce.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.gzone.ecommerce.dao.DireccionDAO;
import com.gzone.ecommerce.dao.util.JDBCUtils;
import com.gzone.ecommerce.exceptions.DataException;
import com.gzone.ecommerce.exceptions.InstanceNotFoundException;
import com.gzone.ecommerce.model.Direccion;

public class DireccionDAOImpl implements DireccionDAO {
	
	private static Logger logger = LogManager.getLogger(DireccionDAOImpl.class.getName());
	public DireccionDAOImpl() {}
	
	@Override
	public Direccion findById (Connection connection, Long id)
		throws InstanceNotFoundException, DataException{
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		try {          
			String queryString = 
					"SELECT d.COD_DIRECCION, d.DIRECCION, d.COD_PROVINCIA, d.COD_USUARIO " 
							+ "FROM Direccion d  " +
							"WHERE d.COD_DIRECCION = ? ";
			
			preparedStatement = connection.prepareStatement(queryString,
					ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			int i = 1;                
			preparedStatement.setLong(i++, id);

			resultSet = preparedStatement.executeQuery();

			Direccion d = null;

			if (resultSet.next()) {
				d = loadNext(connection, resultSet);				
			} else {
				throw new InstanceNotFoundException("Direccion with id " + id + 
						"not found", Direccion.class.getName());
			}

			return d;

		} catch (SQLException e) {
			logger.fatal("idDireccion: "+id, e);
			throw new DataException(e);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  
		
	}
	
	@Override
	public List<Direccion> findByIdUsuario (Connection connection, Long id)
			throws DataException{
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		try {          
			String queryString = 
					"SELECT d.COD_DIRECCION, d.DIRECCION, d.COD_PROVINCIA, d.COD_USUARIO " 
							+ "FROM Direccion d  " +
							"WHERE d.COD_USUARIO = ? ";
			
			preparedStatement = connection.prepareStatement(queryString,
					ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			int i = 1;                
			preparedStatement.setLong(i++, id);

			resultSet = preparedStatement.executeQuery();


			List<Direccion> results = new ArrayList<Direccion>();                        
			Direccion d = null;

			while (resultSet.next()) {
				d = loadNext (connection,resultSet);
				results.add(d);
			}

			return results;

		} catch (SQLException e) {
			logger.fatal("idUsuario: "+id, e);
			throw new DataException(e);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  
		
	}
	
	private Direccion loadNext(Connection connection, ResultSet resultSet)
			throws SQLException, DataException {

				int i = 1;
				Long direccionId = resultSet.getLong(i++);	                
				String direccion = resultSet.getString(i++);	                
				Long provinciaId = resultSet.getLong(i++);
				Long codUsuario = resultSet.getLong(i++);
				
		
				Direccion d = new Direccion();		
				d.setCodDireccion(direccionId);
				d.setCodProvincia(provinciaId);
				d.setCodUsuario(codUsuario);
				d.setDireccion(direccion);
				
				return d;
			}
	
	@Override
	public Direccion create(Connection connection, Direccion d) 
     		throws DataException{
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          
			
			String queryString = "INSERT INTO DIRECCION(DIRECCION, COD_PROVINCIA, COD_USUARIO)"
					+ "VALUES (?, ?, ?)";

			preparedStatement = connection.prepareStatement(queryString,
					Statement.RETURN_GENERATED_KEYS);
			
			int i = 1;     
			preparedStatement.setString(i++,d.getDireccion());
			preparedStatement.setLong(i++, d.getCodProvincia());
			preparedStatement.setLong(i++, d.getCodUsuario());

			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Direccion'");
			} 
			
			
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long pk = resultSet.getLong(1); 
				d.setCodDireccion(pk);
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}
			
			return d;

		} catch (SQLException e) {
			logger.fatal("Direccion : " + ToStringBuilder.reflectionToString(d));
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
		
		
	}
	
	@Override
	public void update (Connection connection, Direccion d)
			throws InstanceNotFoundException, DataException{
		PreparedStatement preparedStatement = null;
		try {
			
			String queryString = 
					"UPDATE DIRECCION " +
					"SET DIRECCION = ?, COD_PROVINCIA = ?, COD_USUARIO = ? " +
					"WHERE COD_DIRECCION = ? ";

			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setString(i++, d.getDireccion());
			preparedStatement.setLong(i++, d.getCodProvincia());
			preparedStatement.setLong(i++, d.getCodUsuario());
			preparedStatement.setLong(i++,d.getCodDireccion());
			
			
			

			int updatedRows = preparedStatement.executeUpdate();

			if (updatedRows == 0) {
				throw new InstanceNotFoundException(d.getCodDireccion(), Direccion.class.getName());
			}

			if (updatedRows > 1) {
				throw new SQLException("Duplicate row for id = '" + 
						d.getCodDireccion() + "' in table 'Direccion'");
			}     
			

		} catch (SQLException e) {
			logger.fatal("Direccion : " + ToStringBuilder.reflectionToString(d));
			throw new DataException(e);    
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}              		
		
	}
	
	@Override
	public long delete(Connection connection, Long id)
			throws InstanceNotFoundException, DataException{
		PreparedStatement preparedStatement = null;

		try {
			
			String queryString =	
					  "DELETE FROM DIRECCION " 
					+ "WHERE COD_DIRECCION = ? ";
			
			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			int removedRows = preparedStatement.executeUpdate();

			if (removedRows == 0) {
				throw new InstanceNotFoundException(id,Direccion.class.getName());
			} 
			return removedRows;

		} catch (SQLException e) {
			logger.fatal("idDireccion: "+id,e);
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
	}
		

	
}
